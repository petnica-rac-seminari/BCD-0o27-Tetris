#include <FreeRTOSConfig.h>
#include <freertos/portmacro.h>
#include <freertos/projdefs.h>
#include <array>
namespace tetrics_module
{
    class board
    {
    public:    
        void start();
        bool frame(TickType_t currTick);
        void clear();
        void rotateShape(int* matrix);
        void rotate();
        void moveLeft();
        void moveRight();
        void moveDown();        
        int getTile(int x, int y);
        const int width=10;
        const int height=22;
        std::array<std::array<int, 22>, 10> board = { };
    private:
        int currentRotation;           //has a value of 0, 1, 2 or 3 depending on the rotation of the figure
        
       int I_shape[4][4][4] ={
                                { {-1, -1, -1, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                { {-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}},
                                { {-1, -1, -1, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                { {-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}},
                                };

        int L_shape[4][4][4] = {
                                {{-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0}},
                                {{-1, -1, -1, 0}, {0, 0, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {0, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}
                                };

        int J_shape[4][4][4] = {
                                {{0, -1, 0, 0}, {0, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, -1, -1, 0}, {0, 0, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                };

        int Z_shape[4][4][4] = {
                                {{-1, -1, 0, 0}, {0, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0} },
                                {{0, -1, 0, 0}, {-1, -1, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0} },
                                {{-1, -1, 0, 0}, {0, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {-1, -1, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0} },
                                };
        
        int T_shape[4][4][4] =  {
                                {{-1, -1, -1, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {-1, -1, 0, 0}, {0, -1, 0, 0},  {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {-1, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, 0, 0}, {-1, 0, 0, 0},  {0, 0, 0, 0}}
                                };
    
        int S_shape[4][4][4] = {
                                {{0, -1, -1, 0,}, {-1, -1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, 0, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, -1, 0,}, {-1, -1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, 0, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}},
                                };

        int O_shape[4][4][4] = {
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}}
                                };
        
        TickType_t lastTick = 0;
        void copyMatrix(int* source, int* destination, int rotIndex);
        void createShape();
        void checkCollision();
        int shapeIndex;
        std::array<std::array<int, 4>, 4> currentShape;
        int currentShapeX;
        int currentShapeY;
        int currentShapeColor;
        };
}