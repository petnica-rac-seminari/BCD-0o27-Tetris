
namespace tetrics_module
{
    class board
    {
    public:
        void frame();
        void clear();
        void rotateShape(int matrix[4][4][4]);
        void rotate();
        void moveLeft();
        void moveRight();
        void moveDown();
        void makeNewShape();
        int getTile(int x, int y);
        const int width=10;
        const int height=22;
        int board[10][22];
    private:
        int currentRotation;           //has a value of 0, 1, 2 or 3 depending on the rotation of the figure
        
        int I_shape[4][4][4] ={
                                {{-1, -1, -1, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}},
                                {{-1, -1, -1, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}},
                                };

        int L_shape[4][4][4] = {
                                {{-1, 0, 0, 0}, {-1, 0, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0}},
                                {{-1, -1, -1, 0}, {0, 0, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {0, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}
                                };

        int J_shape[4][4][4] = {
                                {{0, -1, 0, 0}, {0, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, 0, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, -1, -1, 0}, {0, 0, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                };

        int Z_shape[4][4][4] = {
                                {{-1, -1, 0, 0}, {0, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0} },
                                {{0, -1, 0, 0}, {-1, -1, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0} },
                                {{-1, -1, 0, 0}, {0, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {-1, -1, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0} },
                                };
        
        int T_shape[4][4][4] =  {
                                {{-1, -1, -1, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {-1, -1, 0, 0}, {0, -1, 0, 0},  {0, 0, 0, 0}},
                                {{0, -1, 0, 0}, {-1, -1, -1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, 0, 0}, {-1, 0, 0, 0},  {0, 0, 0, 0}}
                                };

        int S_shape[4][4][4] = {
                                {{0, -1, -1, 0,}, {-1, -1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, 0, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}},
                                {{0, -1, -1, 0,}, {-1, -1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
                                {{-1, 0, 0, 0}, {-1, -1, 0, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}},
                                };

        int O_shape[4][4][4] = {
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}},
                                {{-1, -1, 0, 0}, {-1, -1, 0, 0}, {0, 0, 0, 0},  {0, 0, 0, 0}}
                                };
        

        void copyMatrix(int source[4][4][4], int destination[4][4], int rotIndex);
        void createShape();
        void checkCollision();
        int shapeIndex;
        int currentShape[4][4];
        int currentShapeX;
        int currentShapeY;
        int currentShapeColor;
        };
}