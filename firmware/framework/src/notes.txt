UART & Console
--------------
Initialising ESP console directly as a variable in the main class leads to 
hang and reboot rst:0x10 (RTCWDT_RTC_RST),boot:0x2b (SPI_FAST_FLASH_BOOT)

This could be becuase esp_core_dump_uart (initi core dump to uart) runs after 
initialising the console.

Threads
--------
D (45102) CYBERSPACE: Command received was: look


assert failed: heap_caps_free heap_caps.c:351 (heap != NULL && "free() target pointer is outside heap areas")


Backtrace: 0x40378703:0x3fcc84b0 0x4038399d:0x3fcc84e0 0x4038fa72:0x3fcc8510 0x4037a353:0x3fcc8630 0x4037af42:0x3fcc8660 0x4037b025:0x3fcc86b0 0x42017e46:0x3fcc86e0 0x4038af6a:0x3fcc87b0

  #0  0x40378703:0x3fcc84b0 in panic_abort at /Users/fschuetz/.platformio/packages/framework-espidf/components/esp_system/panic.c:423
  #1  0x4038399d:0x3fcc84e0 in esp_system_abort at /Users/fschuetz/.platformio/packages/framework-espidf/components/esp_system/esp_system.c:153
  #2  0x4038fa72:0x3fcc8510 in __assert_func at /Users/fschuetz/.platformio/packages/framework-espidf/components/newlib/assert.c:78
  #3  0x4037a353:0x3fcc8630 in heap_caps_free at /Users/fschuetz/.platformio/packages/framework-espidf/components/heap/heap_caps.c:351 (discriminator 1)
  #4  0x4037af42:0x3fcc8660 in trace_free at /Users/fschuetz/.platformio/packages/framework-espidf/components/heap/include/heap_trace.inc:119
  #5  0x4037b025:0x3fcc86b0 in __wrap_free at /Users/fschuetz/.platformio/packages/framework-espidf/components/heap/include/heap_trace.inc:164
  #6  0x42017e46:0x3fcc86e0 in bcd_cyberspace::ssh_task(void*) at src/modules/cyberspace.cpp:279
  #7  0x4038af6a:0x3fcc87b0 in vPortTaskWrapper at /Users/fschuetz/.platformio/packages/framework-espidf/components/freertos/FreeRTOS-Kernel/portable/xtensa/port.c:154




ELF file SHA256: 963070cc508ca6fe

Error in displaying bitmap
--------------------------

Caps: Blt, Async, Batch, CopyFrom, Suspend, Read, CopyTo;
Display caps: caps = gfx::gfx_caps<false,true,true,true,false,false,false>;
                --> Async, Batch, CopyFrom
                   
BMP caps:     caps = gfx::gfx_caps< true,false,false,false,false,true,true>;
                --> Blt, Read, CopyTo

 draw::bitmap(lcd,lcd.bounds(),bmp, bmp.bounds()); 
        --> lcd.bounds = ((0,0),(160,128))
        --> bmp.bounds = ((0,0),(160,128)) --> not painting through

gfx_drawing.hpp:3788 
    calls bitmap(destination,(srect16)dest_rect,source,source_rect,resize_type,transparent_color,clip)
        --> lcd.bounds = dest_rect = ((0,0),(160,128))
        --> bmp.bounds = source_rect = ((0,0),(160,128)) --> not painting through
        --> resize_type = default: bitmap_resize::crop
        --> transparent_color = default nullptr
        --> clip = default nullptr

gfx_drawing.hpp:3507
    calls bmp_helper<Destination,Source,typename Destination::pixel_type,typename Source::pixel_type>
                ::draw_bitmap(destination,dest_rect,source,source_rect,resize_type,transparent_color,clip,false);
        --> destination = lcd
        --> dest_rect = ((0,0)(160,128))
        --> source = bmp
        --> source_rect = ((0,0),(160,128))
        --> resize_type = bitmap_resize::crop
        --> transparent_color = nullptr
        --> clip = nullptr
        --> async = false

gfx_drawing.hpp:1462 (bmp_helper)
    calls draw_bitmap_impl(destination,dest_rect,source,source_rect,resize_type,transparent_color,clip,async);
        --> destination = lcd
        --> dest_rect = ((0,0)(160,128))
        --> source = bmp
        --> source_rect = ((0,0),(160,128))
        --> resize_type = bitmap_resize::crop
        --> transparent_color = nullptr
        --> clip = nullptr
        --> async = false

gfx_drawing.hpp:1321 (struct draw)

    using batch=helpers::batcher<Destination,Destination::caps::batch,Destination::caps::async>;
        --> Destionation::caps::batch = true
        --> Destionation::caps:async = true

    rect16 srcr=source_rect.normalize().crop(source.bounds());
        --> normalize() = rectx (location(), dimensions()) (gfx_positioning.hpp:292)
                        = rectx (top_left(), sizex<T>(width(),height()))
                        = rectx (pointx<T>(left(),top()), sizex<T>(x2>=x1?x2-x1+1:x1-x2+1,y2>=y1?y2-y1+1:y1-y2+1))
                        = rectx (pointx<T>(left(),top()), sizex<T>(161,129))
                        = rectx (pointx<T>((x1 <= x2) ? x1 : x2, (y1 <= y2) ? y1 : y2), sizex<T>(161,129))
                        = rectx (pointx<T>(0,0), sizex<T>(161,129))

            --> triggers constructor constexpr inline rectx(pointx<T> location, sizex<T> size) 
                    : x1(location.x), y1(location.y), x2(location.x + size.width - 1), 
                      y2(location.y + size.height - 1) (gfx_positioning.hpp:113)

                --> returns rectx<T>((0,0), (161,129)) !!!!!! --> QUE: why +1? Calculated out by crop. Reason this?

            crop(source.bounds()) (gfx_positioning.hpp:332)
                        = crop(rect16(point16(0,0),dimensions())) (gfx_bitmap.hpp:228)
                        = crop(rect16(point16(0,0),m_dimensions))
                        = crop(rect16(point16(0,0),(160,128)))
                --> returns rectx(0,0,160,128

        srcr = (0,0,160,128)
        ====================

    srect16 dsr=dest_rect.crop((srect16)destination.bounds()).normalize();
        --> dest_rect.crop((srect16)destination.bounds()).normalize() =
            (0,0,160,128).crop(0,0,160,128).normalize() =
            (0,0,160,128).normalize() =
            (0,0,161,129)

    ddr = (0,0,161,129)
    o = (int)rect_orientation::normalized = 0 (gfx_positioning.hpp:323)

    const bool has_alpha = thas_alpha::value; (gfx_drawing.hpp:1337)
        --> pixel type is rgb_pixel<16> which does not have alpha channel
        --> false

    if(!has_alpha && transparent_color==nullptr) { ... }
        --> evalutes to true
        --> 



-----
Look at st7735_bcd.hpp:211 tft_spi_driver_result write_window_impl(
Look at tft_spi_driver.hpp:310 return send_next_internal(data,size,queued,1,skip_batch_commit);
    --> size = 40960
        queued = false
        skip_batch_commit = true

---
PN7gfxmenu7SubmenuIN3gfx5pixelIJNS1_14channel_traitsINS1_12channel_name1RELj5ELh0ELh31ELh0ELh31EEENS3_INS4_1GELj6ELh0ELh63ELh0ELh63EEENS3_INS4_1BELj5ELh0ELh31ELh0ELh31EEEEEEN6espidf6st7735ILt128ELt160EL17spi_host_device_t2EL10gpio_num_t10ELSF_14ELSF_15ELSF_16ELh3ELj32768ELj7ELb1ELj4294967295ELj500ELj64EEEEE
 N7gfxmenu7SubmenuIN3gfx5pixelIJNS1_14channel_traitsINS1_12channel_name1RELj5ELh0ELh31ELh0ELh31EEENS3_INS4_1GELj6ELh0ELh63ELh0ELh63EEENS3_INS4_1BELj5ELh0ELh31ELh0ELh31EEEEEEN6espidf6st7735ILt128ELt160EL17spi_host_device_t2EL10gpio_num_t10ELSF_14ELSF_15ELSF_16ELh3ELj32768ELj7ELb1ELj4294967295ELj500ELj64EEEEE


-----

2023-03-28T20:25:01.531924Z DEBUG russh::server::encrypted: name: "bcd_test" Ok("ssh-connection") Ok("publickey")
2023-03-28T20:25:01.532089Z DEBUG russh::server::encrypted: algo: [115, 115, 104, 45, 101, 100, 50, 53, 53, 49, 57], key: [0, 0, 0, 11, 115, 115, 104, 45, 101, 100, 50, 53, 53, 49, 57, 0, 0, 0, 32, 81, 20
6, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30, 248, 243, 189, 212, 211, 218, 44, 59, 33, 188]
2023-03-28T20:25:01.532312Z DEBUG russh::server::encrypted: is_real = 0
2023-03-28T20:25:01.532741Z DEBUG auth_publickey{self=Server { client_id: 0, client_username: None, echo: false, data_buffer: [], tx_data_channel: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x
55a8258bf920, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, tx_command_channel: Sender { chan: Tx { inner: Chan { tx: Tx {
 block_tail: 0x55a8258bfd50, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, server_allowed_keys: ["AAAAC3NzaC1lZDI1NTE5AAAA
IC8Z81ThQhKvXefpDA8GfGSlGOhH5cx0ltDz9nzZszLO", "AAAAC3NzaC1lZDI1NTE5AAAAIMTL6+m+wHEyN2GjdAwDBOX3y325vJDjsZZRgeMDntJg", "AAAAC3NzaC1lZDI1NTE5AAAAIFHO7algVmNW5vLNQKrgWbjPb9cIrR74873U09osOyG8"] } user="bcd_t
est" pubkey=Ed25519(PublicKey(CompressedEdwardsY: [81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30, 248, 243, 189, 212, 211, 218, 44, 59, 33, 188]), Edwa
rdsPoint{
        X: FieldElement51([81239981084405, 1966917066314990, 1145275424490913, 437578671792213, 1877574809974994]),
        Y: FieldElement51([939398097915473, 1486650288687820, 947500905228162, 667377722152580, 1057814790122813]),
        Z: FieldElement51([1, 0, 0, 0, 0]),
        T: FieldElement51([2101996519685155, 1590670119342265, 1930500705717012, 2110800567838286, 2212741679097876])
}))}: mud_server::connection_manager::ssh_server: Server 0: Authenticating user bcd_test with method public key.
2023-03-28T20:25:01.533046Z DEBUG auth_publickey{self=Server { client_id: 0, client_username: None, echo: false, data_buffer: [], tx_data_channel: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x
55a8258bf920, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, tx_command_channel: Sender { chan: Tx { inner: Chan { tx: Tx {
 block_tail: 0x55a8258bfd50, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, server_allowed_keys: ["AAAAC3NzaC1lZDI1NTE5AAAA
IC8Z81ThQhKvXefpDA8GfGSlGOhH5cx0ltDz9nzZszLO", "AAAAC3NzaC1lZDI1NTE5AAAAIMTL6+m+wHEyN2GjdAwDBOX3y325vJDjsZZRgeMDntJg", "AAAAC3NzaC1lZDI1NTE5AAAAIFHO7algVmNW5vLNQKrgWbjPb9cIrR74873U09osOyG8"] } user="bcd_t
est" pubkey=Ed25519(PublicKey(CompressedEdwardsY: [81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30, 248, 243, 189, 212, 211, 218, 44, 59, 33, 188]), Edwa
rdsPoint{
        X: FieldElement51([81239981084405, 1966917066314990, 1145275424490913, 437578671792213, 1877574809974994]),
        Y: FieldElement51([939398097915473, 1486650288687820, 947500905228162, 667377722152580, 1057814790122813]),
        Z: FieldElement51([1, 0, 0, 0, 0]),
        T: FieldElement51([2101996519685155, 1590670119342265, 1930500705717012, 2110800567838286, 2212741679097876])
}))}: mud_server::connection_manager::ssh_server: Public Key is: Ed25519(PublicKey(CompressedEdwardsY: [81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30,
248, 243, 189, 212, 211, 218, 44, 59, 33, 188]), EdwardsPoint{
        X: FieldElement51([81239981084405, 1966917066314990, 1145275424490913, 437578671792213, 1877574809974994]),
        Y: FieldElement51([939398097915473, 1486650288687820, 947500905228162, 667377722152580, 1057814790122813]),
        Z: FieldElement51([1, 0, 0, 0, 0]),
        T: FieldElement51([2101996519685155, 1590670119342265, 1930500705717012, 2110800567838286, 2212741679097876])
})) with fingerprint "fSGr+b/f8XHT6Zu4Q8uvKV1xZdDIdWqG2j4/PUvly/s"
2023-03-28T20:25:01.533411Z  INFO auth_publickey{self=Server { client_id: 0, client_username: None, echo: false, data_buffer: [], tx_data_channel: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x
55a8258bf920, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, tx_command_channel: Sender { chan: Tx { inner: Chan { tx: Tx {
 block_tail: 0x55a8258bfd50, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, server_allowed_keys: ["AAAAC3NzaC1lZDI1NTE5AAAA
IC8Z81ThQhKvXefpDA8GfGSlGOhH5cx0ltDz9nzZszLO", "AAAAC3NzaC1lZDI1NTE5AAAAIMTL6+m+wHEyN2GjdAwDBOX3y325vJDjsZZRgeMDntJg", "AAAAC3NzaC1lZDI1NTE5AAAAIFHO7algVmNW5vLNQKrgWbjPb9cIrR74873U09osOyG8"] } user="bcd_t
est" pubkey=Ed25519(PublicKey(CompressedEdwardsY: [81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30, 248, 243, 189, 212, 211, 218, 44, 59, 33, 188]), Edwa
rdsPoint{
        X: FieldElement51([81239981084405, 1966917066314990, 1145275424490913, 437578671792213, 1877574809974994]),
        Y: FieldElement51([939398097915473, 1486650288687820, 947500905228162, 667377722152580, 1057814790122813]),
        Z: FieldElement51([1, 0, 0, 0, 0]),
        T: FieldElement51([2101996519685155, 1590670119342265, 1930500705717012, 2110800567838286, 2212741679097876])
}))}: mud_server::connection_manager::ssh_server: Public Key is: Ed25519(PublicKey(CompressedEdwardsY: [81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30,
248, 243, 189, 212, 211, 218, 44, 59, 33, 188]), EdwardsPoint{
        X: FieldElement51([81239981084405, 1966917066314990, 1145275424490913, 437578671792213, 1877574809974994]),
        Y: FieldElement51([939398097915473, 1486650288687820, 947500905228162, 667377722152580, 1057814790122813]),
        Z: FieldElement51([1, 0, 0, 0, 0]),
        T: FieldElement51([2101996519685155, 1590670119342265, 1930500705717012, 2110800567838286, 2212741679097876])
})) with fingerprint "fSGr+b/f8XHT6Zu4Q8uvKV1xZdDIdWqG2j4/PUvly/s"
2023-03-28T20:25:01.533411Z  INFO auth_publickey{self=Server { client_id: 0, client_username: None, echo: false, data_buffer: [], tx_data_channel: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x
55a8258bf920, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, tx_command_channel: Sender { chan: Tx { inner: Chan { tx: Tx {
 block_tail: 0x55a8258bfd50, tail_position: 0 }, semaphore: (Semaphore { permits: 1024 }, 1024), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, server_allowed_keys: ["AAAAC3NzaC1lZDI1NTE5AAAA
IC8Z81ThQhKvXefpDA8GfGSlGOhH5cx0ltDz9nzZszLO", "AAAAC3NzaC1lZDI1NTE5AAAAIMTL6+m+wHEyN2GjdAwDBOX3y325vJDjsZZRgeMDntJg", "AAAAC3NzaC1lZDI1NTE5AAAAIFHO7algVmNW5vLNQKrgWbjPb9cIrR74873U09osOyG8"] } user="bcd_t
est" pubkey=Ed25519(PublicKey(CompressedEdwardsY: [81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 170, 224, 89, 184, 207, 111, 215, 8, 173, 30, 248, 243, 189, 212, 211, 218, 44, 59, 33, 188]), Edwa
rdsPoint{
        X: FieldElement51([81239981084405, 1966917066314990, 1145275424490913, 437578671792213, 1877574809974994]),
        Y: FieldElement51([939398097915473, 1486650288687820, 947500905228162, 667377722152580, 1057814790122813]),
        Z: FieldElement51([1, 0, 0, 0, 0]),
        T: FieldElement51([2101996519685155, 1590670119342265, 1930500705717012, 2110800567838286, 2212741679097876])
}))}: mud_server::connection_manager::ssh_server: Successfully authenticated bcd_test by public key.
2023-03-28T20:25:01.533668Z DEBUG russh::server::encrypted: pubkey_key: [0, 0, 0, 11, 115, 115, 104, 45, 101, 100, 50, 53, 53, 49, 57, 0, 0, 0, 32, 81, 206, 237, 169, 96, 86, 99, 86, 230, 242, 205, 64, 17
0, 224, 89, 184, 207, 111, 215, 8, 173, 30, 248, 243, 189, 212, 211, 218, 44, 59, 33, 188]
2023-03-28T20:25:01.533908Z DEBUG russh::cipher: writing, seqn = 5
2023-03-28T20:25:01.534003Z DEBUG russh::cipher: padding length 4
2023-03-28T20:25:01.534066Z DEBUG russh::cipher: packet_length 76
^[[B


----
2023-03-29T22:19:31.521018Z DEBUG russh::cipher: writing, seqn = 8
2023-03-29T22:19:31.521188Z DEBUG russh::cipher: padding length 11
2023-03-29T22:19:31.521285Z DEBUG russh::cipher: packet_length 4604
2023-03-29T22:19:31.527687Z DEBUG russh::cipher: reading, len = [14, 119, 189, 197]
2023-03-29T22:19:31.527862Z DEBUG russh::cipher: reading, seqn = 7
2023-03-29T22:19:31.528032Z DEBUG russh::cipher: reading, clear len = 76
2023-03-29T22:19:31.528135Z DEBUG russh::cipher: read_exact 80
2023-03-29T22:19:31.528266Z DEBUG russh::cipher: read_exact done
2023-03-29T22:19:31.528562Z DEBUG russh::cipher: reading, padding_length 0
2023-03-29T22:19:31.529172Z DEBUG russh::server::encrypted: handler.exec_request ChannelId(2)

----

5928013928705285



